// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token
`

type CreateUserParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	ChannelID    string
	ChannelName  string
	AccessToken  string
	RefreshToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ChannelID,
		arg.ChannelName,
		arg.AccessToken,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
		&i.ChannelName,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING channel_name
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var channel_name string
	err := row.Scan(&channel_name)
	return channel_name, err
}

const getUserByChannelID = `-- name: GetUserByChannelID :one
SELECT id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token FROM users WHERE channel_id = $1
`

func (q *Queries) GetUserByChannelID(ctx context.Context, channelID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByChannelID, channelID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
		&i.ChannelName,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByChannelName = `-- name: GetUserByChannelName :one
SELECT id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token FROM users WHERE channel_name = $1
`

func (q *Queries) GetUserByChannelName(ctx context.Context, channelName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByChannelName, channelName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
		&i.ChannelName,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const updateAccessToken = `-- name: UpdateAccessToken :one
UPDATE users
SET  updated_at = $2, access_token = $3
WHERE id = $1
RETURNING id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token
`

type UpdateAccessTokenParams struct {
	ID          uuid.UUID
	UpdatedAt   time.Time
	AccessToken string
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAccessToken, arg.ID, arg.UpdatedAt, arg.AccessToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
		&i.ChannelName,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET  updated_at = $2, channel_name = $3, access_token = $4, refresh_token = $5
WHERE id = $1
RETURNING id, created_at, updated_at, channel_id, channel_name, access_token, refresh_token
`

type UpdateUserParams struct {
	ID           uuid.UUID
	UpdatedAt    time.Time
	ChannelName  string
	AccessToken  string
	RefreshToken string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.ChannelName,
		arg.AccessToken,
		arg.RefreshToken,
	)
	return err
}
